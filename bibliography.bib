% TODO Fix citations and make them look nice
@article{haas_nvme,
  author          = {Haas, Gabriel and Leis, Viktor},
  title           = {What Modern NVMe Storage Can Do, and How to Exploit it:
                  High-Performance I/O for High-Performance Storage Engines},
  year            = 2023,
  issue_date      = {May 2023},
  publisher       = {VLDB Endowment},
  volume          = 16,
  number          = 9,
  issn            = {2150-8097},
  doi             = {10.14778/3598581.3598584},
  abstract        = {NVMe SSDs based on flash are cheap and offer high
                  throughput. Combining several of these devices into a single
                  server enables 10 million I/O operations per second or more.
                  Our experiments show that existing out-of-memory database
                  systems and storage engines achieve only a fraction of this
                  performance. In this work, we demonstrate that it is possible
                  to close the performance gap between hardware and software
                  through an I/O optimized storage engine design. In a heavy
                  out-of-memory setting, where the dataset is 10 times larger
                  than main memory, our system can achieve more than 1 million
                  TPC-C transactions per second.},
  journal         = {Proc. VLDB Endow.},
  month           = {May},
  pages           = {2090–2102},
  numpages        = 13
}

@inproceedings{storage_api,
  author          = {Didona, Diego and Pfefferle, Jonas and Ioannou, Nikolas and
                  Metzler, Bernard and Trivedi, Animesh},
  title           = {Understanding modern storage APIs: a systematic study of
                  libaio, SPDK, and io\_uring},
  year            = 2022,
  isbn            = 9781450393805,
  publisher       = {Association for Computing Machinery},
  doi             = {10.1145/3534056.3534945},
  abstract        = {Recent high-performance storage devices have exposed
                  software inefficiencies in existing storage stacks, leading to
                  a new breed of I/O stacks. The newest storage API of the Linux
                  kernel is io_uring. We perform one of the first in-depth
                  studies of io_uring, and compare its performance and
                  dis-/advantages with the established libaio and SPDK APIs. Our
                  key findings reveal that (i) polling design significantly
                  impacts performance; (ii) with enough CPU cores io_uring can
                  deliver performance close to that of SPDK; and (iii)
                  performance scalability over multiple CPU cores and devices
                  requires careful consideration and necessitates a hybrid
                  approach. Last, we provide design guidelines for developers of
                  storage intensive applications.},
  booktitle       = {Proceedings of the 15th ACM International Conference on
                  Systems and Storage},
  pages           = {120–-127},
  numpages        = 8,
  series          = {SYSTOR '22}
}

@inproceedings {redleaf,
  author          = {Vikram Narayanan and Tianjiao Huang and David Detweiler and
                  Dan Appel and Zhaofeng Li and Gerd Zellweger and Anton
                  Burtsev},
  title           = {{RedLeaf}: Isolation and Communication in a Safe Operating
                  System},
  booktitle       = {14th USENIX Symposium on Operating Systems Design and
                  Implementation (OSDI 20)},
  year            = 2020,
  isbn            = {978-1-939133-19-9},
  pages           = {21--39},
  url             = {https://www.usenix.org/conference/osdi20/presentation/narayanan-vikram},
  publisher       = {USENIX Association},
  month           = nov
}

@inproceedings{user_space_net,
  author = {Emmerich, Paul and Pudelko, Maximilian and Bauer, Simon and Carle, Georg},
  title = {User Space Network Drivers},
  year = {2018},
  isbn = {9781450355858},
  publisher = {Association for Computing Machinery},
  doi = {10.1145/3232755.3232767},
  abstract = {The rise of user space packet processing frameworks like DPDK and netmap makes low-level code more accessible to developers and researchers. Previously, driver code was hidden in the kernel and rarely modified-or even looked at-by developers working at higher layers. These barriers are gone nowadays, yet developers still treat user space drivers as black-boxes magically accelerating applications. We want to change this: every researcher building network applications should understand the intricacies of the underlying drivers, especially if they impact performance. We present ixy, a user space network driver designed for simplicity and educational purposes. Ixy focuses on the bare essentials of user space packet processing: a packet forwarder including the whole NIC driver uses less than 1000 lines of C code.Our code is available as free and open source under the BSD license at https://github.com/emmericp/ixy.},
  booktitle = {Proceedings of the Applied Networking Research Workshop},
  pages = {91–93},
  numpages = {3},
  location = {Montreal, QC, Canada},
  series = {ANRW '18}
}

@inproceedings{driver_lang,
  author={Emmerich, Paul and Ellmann, Simon and Bonk, Fabian and Egger, Alex and Sánchez-Torija, Esaú García and Günzel, Thomas and di Luzio, Sebastian and Obada, Alexandru and Stadlmeier, Maximilian and Voit, Sebastian and Carle, Georg},
  booktitle={2019 ACM/IEEE Symposium on Architectures for Networking and Communications Systems (ANCS)},
  title={The Case for Writing Network Drivers in High-Level Programming Languages},
  year={2019},
  pages={1-13},
  doi={10.1109/ANCS.2019.8901892}
  }

@inproceedings{cutler,
  author = {Cutler, Cody and Kaashoek, M. Frans and Morris, Robert T.},
  title = {The benefits and costs of writing a POSIX kernel in a high-level language},
  year = {2018},
  isbn = {9781931971478},
  publisher = {USENIX Association},
  abstract = {This paper presents an evaluation of the use of a high-level language (HLL) with garbage collection to implement a monolithic POSIX-style kernel. The goal is to explore if it is reasonable to use an HLL instead of C for such kernels, by examining performance costs, implementation challenges, and programmability and safety benefits.The paper contributes Biscuit, a kernel written in Go that implements enough of POSIX (virtual memory, mmap, TCP/IP sockets, a logging file system, poll, etc.) to execute significant applications. Biscuit makes liberal use of Go's HLL features (closures, channels, maps, interfaces, garbage collected heap allocation), which subjectively made programming easier. The most challenging puzzle was handling the possibility of running out of kernel heap memory; Biscuit benefited from the analyzability of Go source to address this challenge.On a set of kernel-intensive benchmarks (including NGINX and Redis) the fraction of kernel CPU time Biscuit spends on HLL features (primarily garbage collection and thread stack expansion checks) ranges up to 13\%. The longest single GC-related pause suffered by NGINX was 115 microseconds; the longest observed sum of GC delays to a complete NGINX client request was 600 microseconds. In experiments comparing nearly identical system call, page fault, and context switch code paths written in Go and C, the Go version was 5\% to 15\% slower.},
  booktitle = {Proceedings of the 13th USENIX Conference on Operating Systems Design and Implementation},
  pages = {89–105},
  numpages = {17},
  location = {Carlsbad, CA, USA},
  series = {OSDI'18}
}

@inproceedings{haas2020exploiting,
  title={Exploiting Directly-Attached NVMe Arrays in DBMS.},
  author={Haas, Gabriel and Haubenschild, Michael and Leis, Viktor},
  booktitle={CIDR},
  year={2020}
}

@misc{mitre,
  author = {MITRE Corporation},
  title={2023 CWE Top 10 KEV Weaknesses},
  year=2024,
  url = {https://cwe.mitre.org/top25/archive/2023/2023_kev_list.html},
  urldate = {2023-04-10}
}

@misc{ssd-datasheet,
  author = {Samsung Electronics},
  title= {Samsung V-NAND SSD 970 EVO Plus Data Sheet},
  year=2021,
  url = {https://download.semiconductor.samsung.com/resources/data-sheet/Samsung_NVMe_SSD_970_EVO_Plus_Data_Sheet_Rev.3.0_10129514059241.pdf},
  urldate = {2023-04-10}
}

@misc{turbowrite,
  author = {Samsung Electronics},
  title= {Samsung Solid State Drive TurboWrite Technology},
  year=2013,
  url = {https://images-eu.ssl-images-amazon.com/images/I/914ckzwNMpS.pdf},
  urldate = {2023-04-10}
}

@misc{nvme-spec,
  author = {NVM Express},
  title= {NVM Express Base Specification Rev. 1.4},
  year=2019,
  url = {https://nvmexpress.org/wp-content/uploads/NVM-Express-1_4-2019.06.10-Ratified.pdf},
  urldate = {2023-04-10}
}

@misc{google,
  author={Google},
  title={Secure by Design: Google's Perspective on Memory Safety},
  year=2024,
  url={https://security.googleblog.com/2024/03/secure-by-design-googles-perspective-on.html},
  urldate = {2023-04-10}
}

@misc{vroom,
  author={Tuomas Pirhonen},
  title={vroom source code},
  url={https://github.com/bootreer/vroom}
}

@misc{ixy.rs,
  author={Simon Ellmann},
  title={ixy.rs source code},
  url={https://github.com/ixy-languages/ixy.rs}
}
